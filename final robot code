/*
   I am Abrar and this is the code for my robot
   what is it must to do?
  - first the servo motor sweep and take the measure
  // turnRight if the averages[7] is more than 40 cm for a short while delay ( 1000 )
  // turnLeft if the averages[7] is less than 40 cm for a short while delay ( 1000 )
  - blink
  - take the measure
        If the distance is more than 50 cm
        goforword for a short while delay ( 5000 )
        else If the distance is less than 30 cm,
        go backwards (reverse) for a short while delay ( 5000 )
  - blink
  - go left for a short while delay ( 1000 )
  - go goforword for a short while delay ( 3000 )

*/

#include <Servo.h>

// Global array of measurements
long measurements[180];
long averages[18];


// the ultrasonic distance measuring sensor sits on top of this servo
// Servo:use of the library disables analogWrite() (PWM) functionality on pins 9 and 10
Servo myServo;

// ultrasonic distance measuring sensor
const int trigPin = 12;
const int echoPin = 11;

// Control pins for the right half of the H-bridge
const int enable2 = 3; // PWM pin for speed control
const int in3 = 8;
const int in4 = 7;

//other half
const int enable1 = 6; // PWM pin for speed control
const int in1 = 4;
const int in2 = 2;

void setup() {

  Serial.begin (9600);

  Serial.println("hello from abrar program ");
  Serial.print('\n');
  myServo.attach(9);  // attaches the servo on pin 9 to the servo object

  // pins for the ultrasonic distance measuring sensor
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // motors
  pinMode( enable1, OUTPUT);
  pinMode( in1, OUTPUT);
  pinMode( in2, OUTPUT);

  pinMode( enable2, OUTPUT);
  pinMode( in3, OUTPUT);
  pinMode( in4, OUTPUT);

  // Set the speed to 150, which is pretty slow
  analogWrite (enable1, 150);
  analogWrite (enable2, 150);

  // initialize digital pin 13 as an output.
  pinMode(13, OUTPUT);

}

void loop() {

  // look around and see what's nearby
  sweepAndMeasure();

  // look at measurements in 10 degree chunks
  averageInTenDegreeChunks();

  // turnRight if the averages[7] is more than 40 cm for a short while delay ( 1000 )
  // turnLeft if the averages[7] is less than 40 cm for a short while delay ( 1000 )
  if (averages[7] < 40) {
    turnRight (1000);
  }
  else {
    if (averages[7] > 40) {
      turnLeft(1000);
    }
  }

  // blink
  blinkLED () ;

  // take the measure
  long distance;
  distance = measureDistance();

  if (distance > 50 ) {
    // go forward
    goForward(5000) ;
  }
  else if (distance < 30 ) {
    // go backward
    goBackward (5000);
  }

  // blink
  blinkLED () ;

  // go left for a short while delay ( 1000 )
  turnLeft(1000);

  // go forward for a short while delay ( 3000 )
  goForward(3000) ;
}

// all functions:

// blink
void blinkLED () {
  digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(2000);             
  digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);            
  digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1500);            
  digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);
  digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1000);              
  digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);
}

// sweep 180 degrees and populate the measurements array
void sweepAndMeasure() {
  Serial.println("Hello from sweepAndMeasure");

  for (int degree = 0; degree < 180; degree++) {

    myServo.write(degree);
    delay(15);

    measurements[degree] = measureDistance();
  }
}

// Take a measurement using the ultrasonic discance
// measuring sensor and return the distance in cm
// returns -1 if an error occurrs
long measureDistance() {
  Serial.println("Hello from measureDistance");

  long myDuration, distance;

  // measure how far anything is from us
  // send the pulse
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2); // low for 2 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10); // high for 10 microseconds
  digitalWrite(trigPin, LOW);
  myDuration = pulseIn(echoPin, HIGH); // measure the time to the echo
  distance = (myDuration / 2) / 29.1; // calculate the distance in cm

  // if reading is out of range, make it -1

  if (distance <= 0 || distance >= 200) {
    distance = -1;
  }
  return distance;
}


void averageInTenDegreeChunks() {
  Serial.println("Hello from averageInTenDegreeChunks");

  for (int degree = 0; degree < 180; degree = degree + 10) {

    averages [degree / 10] = averageTheseTen(degree);
    // why degree/10 becouse the averages is 18 spot and the meagerment is 180. we divide 180/18 =10
  }
}


int averageTheseTen ( int startHere ) {
  Serial.println("Hello from averageTheseTen");

  int sum = 0;
  int validMeasurements = 10;
  int average;

  for (int degree = startHere; degree < startHere + 10; degree ++) {
    Serial.print(measurements[degree]);
    Serial.print("\t");
    // \t = TAB , \r = RETURN , \n = NEW LINE

    if (-1 == measurements[degree] ) {
      // skip this measuremnt
      validMeasurements--;
    } else {
      sum = sum + measurements[degree];
    }
  }
  average = sum / validMeasurements;
  Serial.print("\taverage: ");
  // "\taverage: " \t print tap  then print average : print colounm
  // anything in side the " " is print that if not  as the line under is cheak the value
  Serial.print(average);
  Serial.print("\t");
  Serial.print("valid measurement: ");
  Serial.print(validMeasurements);
  Serial.println("");

  return average;
}


// go backward for a certain amount of time
void goBackward(int timeToMove) {
  Serial.println("Test goBackward function");

  // left motor
  digitalWrite (in1, LOW);
  digitalWrite (in2, HIGH);
  // Right motor
  digitalWrite (in3, HIGH);
  digitalWrite (in4, LOW);

  delay (timeToMove);
}

// go forward for a certain amount of time
void goForward(int timeToMove) {
  Serial.println("Test goForward function");

  // left motor
  digitalWrite (in1, HIGH);
  digitalWrite (in2, LOW);
  // Right motor
  digitalWrite (in3, LOW);
  digitalWrite (in4, HIGH);

  delay (timeToMove);
}

// turn left for a certain amount of time
void turnLeft(int timeToMove) {
  Serial.println("Test turnLeft function");

  // left motor
  digitalWrite (in1, LOW);
  digitalWrite (in2, HIGH);
  // Right motor
  digitalWrite (in3, LOW);
  digitalWrite (in4, HIGH);

  delay (timeToMove);
}

// turn right for a certain amount of time
void turnRight(int timeToMove) {
  Serial.println("Test turnRight function");

  // left motor
  digitalWrite (in1, HIGH);
  digitalWrite (in2, LOW);
  //Right motor
  digitalWrite (in3, HIGH);
  digitalWrite (in4, LOW);

  delay (timeToMove);
}
